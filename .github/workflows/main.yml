name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 수동 실행도 가능하도록

jobs:
  build:
    runs-on: ubuntu-latest # OS 환경
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build with Gradle
      run: ./gradlew clean build

    - name: Check current directory
      run: pwd

    - name: List files in build/libs
      run: ls -la build/libs

    - name: Docker build
      run: docker build -t rangers:latest .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: build/libs/*.jar

    - name: Upload config files
      uses: actions/upload-artifact@v2
      with:
        name: config-files
        path: |
          docker-compose.blue.yml
          docker-compose.green.yml
          nginx.blue.conf
          nginx.green.conf
          Dockerfile
          src/main/resources/application.yml

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts
        path: build/libs

    - name: Download config files
      uses: actions/download-artifact@v2
      with:
        name: config-files

    - name: Check current directory
      run: pwd

    - name: List all required files
      run: |
        ls -la
        cat docker-compose.blue.yml
        cat docker-compose.green.yml
        cat nginx.blue.conf
        cat nginx.green.conf
        cat Dockerfile
        cat src/main/resources/application.yml

    - name: EC2로 파일 보내기
      uses: appleboy/scp-action@v0.1.1
      with:
        username: ubuntu
        host: ${{ secrets.EC2_SERVER_HOST }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: |
          build/libs/rangers-0.0.1-SNAPSHOT.jar
          entry.sh
          docker-compose.blue.yml
          docker-compose.green.yml
          nginx.blue.conf
          nginx.green.conf
          Dockerfile
          src/main/resources/application.yml
        target: "/home/ubuntu/app/"

    - name: 배포
      uses: appleboy/ssh-action@v0.1.1
      with:
        username: ubuntu
        host: ${{ secrets.EC2_SERVER_HOST }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: GITHUB_SHA
        script: |
          export IMAGE_TAG=${GITHUB_SHA::7}
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          chmod 777 /home/ubuntu/app/entry.sh
          /home/ubuntu/app/entry.sh $IMAGE_TAG $DOCKER_USERNAME
